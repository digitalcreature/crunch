#!/bin/sh
_=[[  #shell shenanigans to avoid relying on a specific lua install
      #change this line if your install is different:
      lua5.3 $0 "$@"; return; ]] _ = nil

require "tsv"
require "util"

local binname = "crunch"
local cfname = "crunchfile"

local tokens = arg[0]:gmatch("([%w%n%.]+)")
local token
repeat
	binname = token
	token = tokens()
until not token

options = setmetatable({}, {
	__metatable = {
		__index = {
			argcount = 0,
			description = "",
			usage = "",
		},
		__call = function(self, ...)
			self:exec(...)
		end
	},
	__newindex = function(t, k, v)
		if type(k) == "string" and type(v) == "function" then
			local f = v
			v = setmetatable(f() or {}, getmetatable(options))
			v.exec = f
			local name, shortname = v.name, v.shortname
			k, v.name = v.name or "--"..k, v.name or "--"..k
			if v.shortname ~= false then
				v.shortname = v.shortname or "-"..k:match("([^-])")
				rawset(t, v.shortname, v)
			end
		end
		rawset(t, k, v)
		if type(k) ~= "number" then
			rawset(t, #t + 1, v)
		end
	end
})

local help
local isinteractive

function options:help()
	if not self then return {
		description = "show usage info"
	} end
	help()
	os.exit(0)
end

function options:file(fname)
	if not self then return {
		description = "specify crunchfile location",
		usage = "<crunchfile>",
		argcount = 1
	} end
	cfname = fname
end

function options:interactive()
	if not self then return {
		description = "interactive mode"
	} end
	print("interactive mode")
	os.exit(0)
end

function help()
	print("usage:")
	print("$ "..binname.." (options <args...>...) [target] <args...>")
	print()
	local c1, c2, c3, c4 = 16, 8, 16, 32
	local hb = ("="):rep(c1 + c2 + c3 + c4)
	print("available options:")
	print(hb)
	print(
		("name:"):setlen(c1)
		..("alt:"):setlen(c2)
		..("args:"):setlen(c3)
		..("description:"):setlen(c4)
	)
	print(hb)
	for _, option in ipairs(options) do
		print(
			option.name:setlen(c1)
			..option.shortname:setlen(c2)
			..option.usage:setlen(c3)
			..option.description:setlen(c4)
		)
	end
	print()
end

targets = setmetatable({}, util.mt_recordkeyorder)

function targets.targets()
	for _, name in ipairs(targets) do
		print(name)
	end
end

function targets.data()
	for _, c in ipairs(data.columns) do
		print(c.id, c.name)
	end
end

function targets.row(r)
	r = tonumber(r)
	if r then
		data:printrow(r)
	end
end

function targets.column(c)
	c = data.columns[c] or tonumber(c)
	if c then
		data:printcolumn(c)
	end
end

local args = {...}

local i = 0
while args[i + 1] do
	i = i + 1
	local arg = args[i]
	local option = options[arg]
	if option then
		if args[i + option.argcount] then
			if option.argcount > 0 then
				option(table.unpack(args, i + 1, i + option.argcount))
			else
				option()
			end
			i = i + option.argcount
		else
			print("not enough arguments for option \'"..arg.."\'")
			print("need "..option.argcount..", given "..(#args - i))
			print("usage:")
			print("$ "..binname.." "..arg.." "..option.usage)
			os.exit(1)
		end
	else
		break
	end
end

crunchfile = {}

crunchfile.targets = targets

local chunk, error = loadfile(cfname, nil, crunchfile)
if chunk then
	chunk()
else
	print("error loading crunchfile \'"..cfname.."\':")
	print(error)
	os.exit(1)
end

local error
data, error = tsv.Data(crunchfile.fname, crunchfile.nums)

if error then
	print(error)
	os.exit(1)
end

if type(crunchfile.init) == "function" then
	crunchfile.init(data)
end
